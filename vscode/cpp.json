{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"QDebug": {
		"prefix": "/debug",
		"body": [
			"qDebug() << $1;"
		],
		"description": "qDebug() <<"
	},
	"QDebug Funct": {
		"prefix": "/debugfn",
		"body": [
			"qDebug() << __FUNCTION__;"
		],
		"description": "qDebug() << __FUN"
	},
	"QDebug Unique": {
		"prefix": "/debugdupsko",
		"body": [
			"qDebug() << \"DUPSKO\" << $1;"
		],
		"description": "qDebug() << DUPSKO"
	},
	"AUTO_PROPERTY": {
		"prefix": "/property",
		"body": [
			"AUTO_PROPERTY($1, $2, $2, set${2/(.)/${1:/upcase}/}, $2Changed)"
		],
		"description": "qDebug() << DUPSKO"
	},
	"AUTO_POINTER_PROPERTY": {
		"prefix": "/ptr_property",
		"body": [
			"AUTO_POINTER_PROPERTY($1, $2, $2)"
		],
		"description": "qDebug() << DUPSKO"
	}
}
